#include <bits/stdc++.h>
using namespace std;

class Solution {
  private:
    // Function to check if moving to (x, y) is valid
    bool isSafe(int x, int y, int n, vector<vector<int>>& visited, vector<vector<int>>& m) {
        // Check boundaries and whether the cell is visited or blocked (m[x][y] == 1)
        if (x >= 0 && x < n && y >= 0 && y < n && visited[x][y] == 0 && m[x][y] == 1) {
            return true;
        }
        return false;
    }

    // Function to recursively explore the maze and find all possible paths
    void solve(vector<vector<int>>& m, int n, vector<string>& ans, int x, int y, vector<vector<int>>& visited, string path) {
        // If the destination (n-1, n-1) is reached, add the current path to the answer
        if (x == n - 1 && y == n - 1) {
            ans.push_back(path);
            return;
        }

        // Mark the current cell as visited
        visited[x][y] = 1;

        // Move Down
        int newx = x + 1;
        int newy = y;
        if (isSafe(newx, newy, n, visited, m)) {
            solve(m, n, ans, newx, newy, visited, path + 'D'); // Move Down
        }

        // Move Left
        newx = x;
        newy = y - 1;
        if (isSafe(newx, newy, n, visited, m)) {
            solve(m, n, ans, newx, newy, visited, path + 'L'); // Move Left
        }

        // Move Right
        newx = x;
        newy = y + 1;
        if (isSafe(newx, newy, n, visited, m)) {
            solve(m, n, ans, newx, newy, visited, path + 'R'); // Move Right
        }

        // Move Up
        newx = x - 1;
        newy = y;
        if (isSafe(newx, newy, n, visited, m)) {
            solve(m, n, ans, newx, newy, visited, path + 'U'); // Move Up
        }

        // Unmark the current cell as visited (backtrack)
        visited[x][y] = 0;
    }

  public:
    // Function to find all paths from (0, 0) to (n-1, n-1) in the maze
    vector<string> findPath(vector<vector<int>>& m, int n) {
        vector<string> ans;

        // If the start point (0, 0) is blocked, return no paths
        if (m[0][0] == 0) {
            return ans;
        }

        // Initialize a visited matrix to keep track of visited cells
        vector<vector<int>> visited(n, vector<int>(n, 0));

        string path = "";  // String to store the current path
        
        // Start the recursive solving from (0, 0)
        solve(m, n, ans, 0, 0, visited, path);

        // Sort the resulting paths lexicographically
        sort(ans.begin(), ans.end());

        return ans;
    }
};

//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;  // Read number of test cases
    while (t--) {
        int n;
        cin >> n;  // Read the size of the matrix (n x n)
        
        // Initialize the matrix 'm' of size n x n
        vector<vector<int>> m(n, vector<int>(n, 0));
        
        // Read the matrix input
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cin >> m[i][j];  // Read each cell of the maze
            }
        }

        Solution obj;  // Create an instance of the Solution class
        vector<string> result = obj.findPath(m, n);  // Get all paths from (0, 0) to (n-1, n-1)
        
        // If no paths are found, print -1
        if (result.size() == 0)
            cout << -1;
        else
            // Print all paths
            for (int i = 0; i < result.size(); i++)
                cout << result[i] << " ";
        cout << endl;
    }
    return 0;
}
// } Driver Code Ends
